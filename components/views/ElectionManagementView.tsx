import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

import React from 'react';

const AnalyticsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📊 Analytics</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The Analytics dashboard will be available here.</p>
                <p>Features will include: Candidate Performance, Voter Sentiment, Engagement Heat Maps, and Real-time Monitoring.</p>
            </div>
        </div>
    );
};

export default AnalyticsView;
import React from 'react';

const CampaignsView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">📢 Campaigns</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Campaign Management tools will be available here.</p>
                <p>Features will include: Message Broadcasting, Event Coordination, Social Media Scheduling, and Voter Outreach Analytics.</p>
            </div>
        </div>
    );
};

export default CampaignsView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, TikTokIcon, InstagramIcon, FacebookIcon, XIcon, YouTubeIcon, LinkIcon, DownloadIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeDisplay from '../QRCodeDisplay.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidateDashboardViewProps {
    user: User;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateDashboardView: React.FC<CandidateDashboardViewProps> = ({ user, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [socialPlatforms, setSocialPlatforms] = useState([
        { name: 'TikTok', icon: <TikTokIcon className="w-6 h-6" />, linked: true },
        { name: 'Instagram', icon: <InstagramIcon className="w-6 h-6" />, linked: true },
        { name: 'Facebook', icon: <FacebookIcon className="w-6 h-6" />, linked: false },
        { name: 'X', icon: <XIcon className="w-6 h-6" />, linked: true },
        { name: 'YouTube', icon: <YouTubeIcon className="w-6 h-6" />, linked: false },
    ]);
    const texts = UI_TEXT[language];
    
    // Ensure this view is only for candidates
    if (user.role !== UserRole.Candidate) {
        return <p>{texts.accessDenied}</p>;
    }

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handleLinkToggle = (platformName: string) => {
        setSocialPlatforms(prevPlatforms =>
            prevPlatforms.map(p =>
                p.name === platformName ? { ...p, linked: !p.linked } : p
            )
        );
        // In a real app, an API call would be made here to update the user's settings.
    };
    
    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${user.partySlug}&gov=${user.governorateSlug}&candidate=${user.id}`;
    const qrImageUrl = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodeURIComponent(qrUrl)}`;

    const handleDownloadQr = async () => {
        try {
            const response = await fetch(qrImageUrl);
            const blob = await response.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = `qr-code-${user.partySlug}-${user.governorateSlug}.png`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Failed to download QR code:', error);
            alert(texts.downloadQrFailed);
        }
    };


    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                        <div className="text-white">
                            <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>

                 <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.promoTools}</h3>
                    <p className="text-sm text-slate-400 mb-4 font-arabic">{texts.promoToolsDesc}</p>
                    <div className="flex flex-col sm:flex-row items-center gap-6">
                        <div className="bg-white p-4 rounded-lg inline-block">
                           <QRCodeDisplay url={qrUrl} />
                        </div>
                        <div className="text-center sm:text-left">
                            <p className="font-bold font-arabic text-lg">{texts.scanToSee}</p>
                             <button
                                onClick={handleDownloadQr}
                                className="mt-4 flex items-center justify-center space-x-2 px-4 py-2 text-sm font-semibold bg-primary text-on-primary rounded-full transition-all hover:brightness-110"
                            >
                                <DownloadIcon className="w-4 h-4" />
                                <span className="font-arabic">{texts.downloadQr}</span>
                            </button>
                        </div>
                    </div>
                </div>

                <div className="border-t border-white/20 p-6">
                    <h3 className="text-lg font-semibold text-white">{texts.socialConnections}</h3>
                    <p className="text-sm text-slate-400 mb-4">{texts.socialConnectionsDesc}</p>
                    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
                        {socialPlatforms.map(platform => (
                            <div key={platform.name} className="flex items-center justify-between p-3 glass-card rounded-lg">
                                <div className="flex items-center space-x-3 text-white">
                                    {platform.icon}
                                    <span className="font-medium">{platform.name}</span>
                                </div>
                                {platform.linked ? (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="text-xs font-semibold text-flag-red hover:underline">{texts.unlink}</button>
                                ) : (
                                    <button onClick={() => handleLinkToggle(platform.name)} className="flex items-center space-x-1 px-3 py-1 text-xs font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110">
                                        <LinkIcon className="w-3 h-3"/>
                                        <span>{texts.link}</span>
                                    </button>
                                )}
                            </div>
                        ))}
                    </div>
                </div>
            </div>

            <div>
                <h3 className="text-xl font-bold mb-4 text-white">{texts.myPosts}</h3>
                {isLoading ? (
                    <Spinner />
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYet}</p>
                )}
            </div>
        </div>
    );
};

export default CandidateDashboardView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, WhatsAppIcon, PhoneIcon, EmailIcon, MessageIcon, ShareIcon, FemaleIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import * as api from '../../services/apiService.ts';
import QRCodeModal from '../QRCodeModal.tsx';
import { UI_TEXT } from '../../translations.ts';

interface CandidateProfileViewProps {
    candidate: User;
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const CandidateProfileView: React.FC<CandidateProfileViewProps> = ({ candidate, user, requestLogin, language, onSelectProfile, onSelectPost }) => {
    const [candidatePosts, setCandidatePosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isQrModalOpen, setQrModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        if (candidate.role !== UserRole.Candidate) return;

        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: candidate.id });
                setCandidatePosts(posts);
            } catch (error) {
                console.error("Failed to fetch candidate posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [candidate.id, candidate.role]);

    if (candidate.role !== UserRole.Candidate) {
        return <p className="p-6 text-center">{texts.notACandidate}</p>;
    }
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        }
        // TODO: Wire up contact actions to backend
    };

    const qrUrl = `https://civic-social.yoursite.web.app/discover?party=${candidate.partySlug}&gov=${candidate.governorateSlug}&candidate=${candidate.id}`;

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            <div className="glass-card rounded-lg shadow-lg overflow-hidden mb-6">
                <div className="p-6">
                    <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                        <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={candidate.avatarUrl} alt={candidate.name} />
                        <div>
                            <h2 className="text-2xl font-bold flex items-center">
                                {candidate.name}
                                {candidate.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                                {candidate.gender === 'Female' && <FemaleIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <p className="text-md text-slate-400">{candidate.party} - {candidate.governorate}</p>
                            <p className="text-sm mt-2 text-slate-200">{candidate.bio || texts.noBio}</p>
                            <div className="flex space-x-2 mt-4 text-slate-200">
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><WhatsAppIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><PhoneIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><EmailIcon className="w-5 h-5" /></button>
                                <button onClick={handleInteraction} className="p-2 bg-white/10 rounded-full hover:bg-white/20"><MessageIcon className="w-5 h-5" /></button>
                                <button onClick={() => setQrModalOpen(true)} className="p-2 bg-white/10 rounded-full hover:bg-white/20" title="Share with QR Code"><ShareIcon className="w-5 h-5" /></button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.postsBy.replace('{name}', candidate.name)}</h3>
                {isLoading ? (
                    <p className="text-center py-10 text-slate-400">{texts.loadingPosts}</p>
                ) : candidatePosts.length > 0 ? (
                    candidatePosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetCandidate}</p>
                )}
            </div>
             {isQrModalOpen && (
                <QRCodeModal
                    url={qrUrl}
                    onClose={() => setQrModalOpen(false)}
                    title={`Share ${candidate.name}'s Party Info`}
                />
            )}
        </div>
    );
};

export default CandidateProfileView;
// Fix: Populating components/views/CandidatesView.tsx with a list of candidates.
import React, { useState, useEffect } from 'react';
import { Governorate, User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface CandidatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    selectedGender: 'Male' | 'Female' | 'All';
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const CandidatesView: React.FC<CandidatesViewProps> = ({ selectedGovernorate, selectedParty, selectedGender, onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const users = await api.getUsers({
                    role: UserRole.Candidate,
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    gender: selectedGender,
                });
                setCandidates(users);
            } catch (error) {
                console.error("Failed to fetch candidates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, [selectedGovernorate, selectedParty, selectedGender]);


    return (
        <div className="mt-4">
             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noPostsFound}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default CandidatesView;
import React, { useState } from 'react';
import { User, Post, PostPrivacy, Language } from '../../types.ts';
import { GlobeAltIcon, UsersIcon, LockClosedIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface ComposeViewProps {
    user: User;
    onPost: (postDetails: Partial<Post>) => void;
    language: Language;
    postType?: 'Post' | 'Whisper';
}

const ComposeView: React.FC<ComposeViewProps> = ({ user, onPost, language, postType = 'Post' }) => {
    const [content, setContent] = useState('');
    const [privacy, setPrivacy] = useState<PostPrivacy>(PostPrivacy.Public);
    const [isPrivacyOpen, setIsPrivacyOpen] = useState(false);
    const texts = UI_TEXT[language];
    const isWhisper = postType === 'Whisper';


    const handlePost = () => {
        if (content.trim()) {
            onPost({ content, type: 'Post', privacy });
            setContent('');
        }
    };
    
    const handleSaveDraft = () => {
        console.log("Saving draft:", { content, privacy });
        alert(texts.draftSaved);
    };

    const handlePreview = () => {
        alert(`${texts.previewingPost}:\n\n${content}\n\n${texts.privacy}: ${privacy}`);
    };

    const privacyOptions = [
        { value: PostPrivacy.Public, label: texts.public, icon: <GlobeAltIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Friends, label: texts.friends, icon: <UsersIcon className="w-5 h-5" /> },
        { value: PostPrivacy.Private, label: texts.private, icon: <LockClosedIcon className="w-5 h-5" /> },
    ];
    const selectedPrivacyOption = privacyOptions.find(opt => opt.value === privacy)!;

    return (
        <div className="glass-card rounded-lg p-4">
            <div className="flex space-x-4">
                <img className="w-12 h-12 rounded-full ring-2 ring-white/50" src={user.avatarUrl} alt={user.name} />
                <div className="w-full">
                    <textarea value={content} onChange={(e) => setContent(e.target.value)} className="w-full p-2 border-none rounded-md bg-transparent focus:ring-0 text-lg placeholder-theme-text-muted" rows={isWhisper ? 3 : 5} placeholder={texts.whatsOnYourMind} />
                </div>
            </div>
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div className="flex space-x-1 items-center">
                    <div className="relative">
                        <button onClick={() => setIsPrivacyOpen(!isPrivacyOpen)} className="flex items-center space-x-1 p-2 rounded-full hover:bg-white/10 text-theme-text-muted">
                            {selectedPrivacyOption.icon}
                            <span className="text-xs font-semibold hidden sm:inline">{selectedPrivacyOption.label}</span>
                            <ChevronDownIcon className="w-4 h-4" />
                        </button>
                        {isPrivacyOpen && (
                            <div className="absolute bottom-full mb-2 w-48 glass-card rounded-md shadow-lg z-10">
                                {privacyOptions.map(option => (
                                    <button key={option.value} onClick={() => { setPrivacy(option.value); setIsPrivacyOpen(false); }} className="w-full flex items-center space-x-2 px-4 py-2 text-sm text-theme-text-base hover:bg-white/10">
                                        {option.icon} <span>{option.label}</span>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>
                </div>
                <div className="flex items-center space-x-2">
                    {!isWhisper && (
                         <>
                            <button onClick={handleSaveDraft} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.saveDraft}</button>
                            <button onClick={handlePreview} className="px-4 py-2 text-sm font-semibold bg-white/10 text-theme-text-base rounded-full hover:bg-white/20">{texts.preview}</button>
                         </>
                    )}
                    <button onClick={handlePost} disabled={!content.trim()} className="px-6 py-2 font-bold bg-primary text-on-primary rounded-full transition-all hover:brightness-110 disabled:opacity-50 disabled:cursor-not-allowed">
                        {texts.post}
                    </button>
                </div>
            </div>
        </div>
    );
};

export default ComposeView;
import React from 'react';
import { AppTab } from '../../types.ts';
import { QrCodeIcon, UsersIcon, LifebuoyIcon } from '../icons/Icons.tsx';

interface CrossPlatformNavigationViewProps {
    onNavigateToCandidates: () => void;
    onQrScan: () => void;
}

const CrossPlatformNavigationView: React.FC<CrossPlatformNavigationViewProps> = ({ onNavigateToCandidates, onQrScan }) => {
  return (
    <div className="p-4 sm:p-6 max-w-2xl mx-auto">
        <div className="text-center mb-8">
            <h1 className="text-3xl font-bold font-arabic text-white">التنقل بين المنصات</h1>
            <p className="text-slate-200 mt-1">
                Use these links to navigate to key areas of the platform or scan a QR code to discover candidates.
            </p>
        </div>

        <div className="platform-nav">
            <button onClick={onNavigateToCandidates} className="nav-link glass-card">
                <UsersIcon className="w-8 h-8 text-primary" />
                <span className="font-arabic">عرض المرشحين الرسميين</span>
            </button>
      
            <a href="/discover?party=sadrist&gov=basra" className="nav-link glass-card">
                <LifebuoyIcon className="w-8 h-8 text-secondary" />
                <span className="font-arabic">استكشاف التيار الصدري في البصرة</span>
            </a>
      
            <div className="qr-banner glass-card">
                <div className="flex-grow">
                    <h3 className="font-bold text-lg font-arabic">هل لديك رمز QR؟</h3>
                    <p className="text-sm text-theme-text-muted font-arabic">اسكن QR لرؤية مرشحي حزبك في محافظتك!</p>
                </div>
                <button onClick={onQrScan} className="qr-scan-btn">
                    <QrCodeIcon className="w-8 h-8" />
                    <span className="font-arabic">امسح الرمز</span>
                </button>
            </div>
        </div>
    </div>
  );
};

export default CrossPlatformNavigationView;

// Fix: Populating components/views/DebateRoomView.tsx with a placeholder component.
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

interface DebateRoomViewProps {
    language: Language;
}

const DebateRoomView: React.FC<DebateRoomViewProps> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold">{texts.debates}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>{texts.featureComingSoon}</p>
            </div>
        </div>
    );
};

export default DebateRoomView;
import React, { useState, useEffect } from 'react';
import { Governorate, Debate, UserRole, User, Language } from '../../types.ts';
import { DebateIcon, CalendarIcon, ChevronDownIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface DebatesViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const DebateCard: React.FC<{ debate: Debate, language: Language }> = ({ debate, language }) => {
    const debateDate = new Date(debate.scheduledTime);
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true, timeZoneName: 'short' };
    const dateOptions: Intl.DateTimeFormatOptions = { month: 'long', day: 'numeric' };
    const texts = UI_TEXT[language];
    
    const [reactions, setReactions] = useState(debate.reactions || { justice: 0, idea: 0, warning: 0 });

    const handleReaction = (type: 'justice' | 'idea' | 'warning') => {
        setReactions(prev => ({ ...prev, [type]: prev[type] + 1 }));
    };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col">
            <div className="p-5 flex-grow">
                <div className="flex justify-between items-start">
                    <h3 className="text-xl font-bold text-white">{debate.title}</h3>
                    {debate.isLive && (
                        <span className="flex items-center text-xs font-bold text-white bg-flag-red px-2 py-1 rounded-full">
                            <span className="w-2 h-2 mr-1.5 bg-white rounded-full animate-pulse"></span>
                            LIVE
                        </span>
                    )}
                </div>
                <p className="text-sm text-slate-400 mt-1">{debate.topic}</p>

                <div className="mt-4 flex items-center space-x-3 text-sm text-slate-300">
                    <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                    <span>{debateDate.toLocaleDateString(undefined, dateOptions)} at {debateDate.toLocaleTimeString(undefined, timeOptions)}</span>
                </div>

                <div className="mt-4">
                    <p className="text-sm font-semibold mb-2 text-slate-200">Participants:</p>
                    <div className="flex -space-x-2">
                        {debate.participants.map(p => (
                            <img key={p.id} className="w-8 h-8 rounded-full border-2 border-white/50" src={p.avatarUrl} alt={p.name} title={p.name} />
                        ))}
                    </div>
                </div>
            </div>

            {/* Reactions */}
            <div className="px-5 pb-4">
                <div className="flex justify-between items-center text-sm text-slate-400 mb-2 font-arabic">
                    <span>{reactions.justice} عدالة</span>
                    <span>{reactions.idea} فكرة</span>
                    <span>{reactions.warning} تحذير</span>
                </div>
                <div className="flex justify-around items-center bg-black/20 rounded-lg p-1">
                    <button onClick={() => handleReaction('justice')} className="p-2 text-2xl rounded-lg hover:bg-white/10">🙏</button>
                    <button onClick={() => handleReaction('idea')} className="p-2 text-2xl rounded-lg hover:bg-white/10">💡</button>
                    <button onClick={() => handleReaction('warning')} className="p-2 text-2xl rounded-lg hover:bg-white/10">⚠️</button>
                </div>
            </div>

            <div className="bg-black/20 px-5 py-3">
                <button className="w-full px-4 py-2 text-sm font-semibold text-white bg-brand-hot-pink rounded-full transition-all hover:brightness-110 flex items-center justify-center space-x-2">
                    <DebateIcon className="w-5 h-5" />
                    <span>{debate.isLive ? texts.joinLiveDebate : texts.setReminder}</span>
                </button>
            </div>
        </div>
    );
};


const DebatesView: React.FC<DebatesViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [selectedCandidateIds, setSelectedCandidateIds] = useState<string[]>([]);
    const [isFilterOpen, setIsFilterOpen] = useState(false);
    const texts = UI_TEXT[language];
    
    const [allCandidates, setAllCandidates] = useState<User[]>([]);
    const [filteredDebates, setFilteredDebates] = useState<Debate[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        api.getUsers({ role: UserRole.Candidate }).then(setAllCandidates);
    }, []);

    useEffect(() => {
        const fetchDebates = async () => {
            setIsLoading(true);
            try {
                const debates = await api.getDebates({
                    governorate: selectedGovernorate,
                    party: selectedParty,
                    participantIds: selectedCandidateIds,
                });
                setFilteredDebates(debates);
            } catch (error) {
                console.error("Failed to fetch debates:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchDebates();
    }, [selectedGovernorate, selectedParty, selectedCandidateIds]);
    
    const handleCandidateSelection = (candidateId: string) => {
        setSelectedCandidateIds(prev =>
            prev.includes(candidateId)
                ? prev.filter(id => id !== candidateId)
                : [...prev, candidateId]
        );
    };

    const selectedCandidates = allCandidates.filter(c => selectedCandidateIds.includes(c.id));

    return (
        <div className="p-4 sm:p-6">
            <div className="flex flex-col sm:flex-row justify-between sm:items-center mb-4">
                <h2 className="text-2xl font-bold text-white">{texts.debates}</h2>

                {/* Candidate Filter */}
                <div className="relative mt-4 sm:mt-0 w-full sm:w-72">
                    <button 
                        onClick={() => setIsFilterOpen(!isFilterOpen)}
                        className="w-full flex justify-between items-center p-2 text-sm text-white border border-white/20 rounded-lg bg-white/10 focus:ring-brand-hot-pink focus:border-brand-hot-pink"
                    >
                        <span className="truncate pr-2">
                            {selectedCandidates.length > 0 ? selectedCandidates.map(c => c.name).join(', ') : texts.filterByCandidate}
                        </span>
                        <ChevronDownIcon className={`w-5 h-5 transition-transform ${isFilterOpen ? 'rotate-180' : ''}`} />
                    </button>
                    {isFilterOpen && (
                        <div className="absolute z-10 top-full mt-1 w-full glass-card rounded-lg shadow-lg max-h-60 overflow-y-auto">
                           {selectedCandidateIds.length > 0 && (
                                <button
                                    onClick={() => setSelectedCandidateIds([])}
                                    className="w-full text-left px-3 py-2 text-sm font-semibold text-brand-hot-pink hover:bg-white/10 border-b border-white/20"
                                >
                                    {texts.clearSelection}
                                </button>
                           )}
                            {allCandidates.map(candidate => (
                                <label key={candidate.id} className="flex items-center px-3 py-2 hover:bg-white/10 cursor-pointer">
                                    <input
                                        type="checkbox"
                                        checked={selectedCandidateIds.includes(candidate.id)}
                                        onChange={() => handleCandidateSelection(candidate.id)}
                                        className="h-4 w-4 rounded border-gray-300 text-brand-hot-pink focus:ring-brand-hot-pink bg-transparent"
                                    />
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-6 h-6 rounded-full mx-2" />
                                    <span className="text-sm font-medium text-slate-200">{candidate.name}</span>
                                </label>
                            ))}
                        </div>
                    )}
                </div>
            </div>

            {isLoading ? (
                <Spinner />
            ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {filteredDebates.length > 0 ? (
                        filteredDebates.map(debate => <DebateCard key={debate.id} debate={debate} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">
                            {texts.noDebatesFound}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default DebatesView;
import React from 'react';
import { User } from '../../types.ts';

const DiscoverView: React.FC<{
    user: User | null;
    requestLogin: () => void;
    onSelectCandidate: (candidate: User) => void;
}> = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">Discover</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">Discover candidates and topics here.</p>
                <p>This feature is under construction.</p>
            </div>
        </div>
    );
};

export default DiscoverView;

import React from 'react';
import { Language } from '../../types.ts';

// Election portal components
import LandingPage from '../election/pages/LandingPage.tsx';
import DashboardPage from '../election/pages/DashboardPage.tsx';
import IntegrityHubPage from '../election/pages/IntegrityHubPage.tsx';
import InternationalPortalPage from '../election/pages/InternationalPortalPage.tsx';
import GovernoratePage from '../election/pages/GovernoratePage.tsx';
import PoliticalPartyPage from '../election/pages/PoliticalPartyPage.tsx';
import PartiesPage from '../election/pages/PartiesPage.tsx';
import ElectionHubPage from '../election/pages/ElectionHubPage.tsx';
import PrivacyPolicyPage from '../election/pages/PrivacyPolicyPage.tsx';
import TermsOfServicePage from '../election/pages/TermsOfServicePage.tsx';
import PricingPage from '../election/pages/PricingPage.tsx';
import CandidateComparisonPage from '../election/pages/CandidateComparisonPage.tsx';
import VoterRegistrationPage from '../election/pages/VoterRegistrationPage.tsx';
import ApiConfigPage from '../election/pages/ApiConfigPage.tsx';
import DataCollectionPage from '../election/pages/DataCollectionPage.tsx';
import ContactValidationPage from '../election/pages/ContactValidationPage.tsx';
import CandidateEnrichmentPage from '../election/pages/CandidateEnrichmentPage.tsx';
import QualityAnalyticsPage from '../election/pages/QualityAnalyticsPage.tsx';


interface ElectionManagementViewProps {
    path: string;
    onNavigate: (path: string) => void;
    language: Language;
}

const ElectionManagementView: React.FC<ElectionManagementViewProps> = ({ path, onNavigate, language }) => {

    const renderPage = () => {
        const pageProps = { onNavigate, language };
        // A simple router based on the path prop
        if (path.startsWith('/governorate/')) {
            const name = path.split('/')[2];
            return <GovernoratePage name={name} {...pageProps} />;
        }
         if (path.startsWith('/party/')) {
            const id = path.split('/')[2];
            return <PoliticalPartyPage id={id} {...pageProps} />;
        }
        
        switch (path) {
            case '/':
                return <LandingPage {...pageProps} />;
            case '/dashboard':
                return <DashboardPage {...pageProps} />;
            case '/integrity-hub':
                return <IntegrityHubPage {...pageProps} />;
            case '/international-portal':
                return <InternationalPortalPage {...pageProps} />;
            case '/parties':
                return <PartiesPage {...pageProps} />;
            case '/election-hub':
                return <ElectionHubPage />;
             case '/privacy-policy':
                return <PrivacyPolicyPage />;
            case '/terms-of-service':
                return <TermsOfServicePage />;
            case '/pricing':
                return <PricingPage />;
            case '/compare':
                return <CandidateComparisonPage />;
             case '/voter-registration':
                return <VoterRegistrationPage {...pageProps} />;
            // New Data Management Routes
            case '/api-config':
                return <ApiConfigPage {...pageProps} />;
            case '/data-collection':
                return <DataCollectionPage {...pageProps} />;
            case '/contact-validation':
                return <ContactValidationPage {...pageProps} />;
            case '/candidate-enrichment':
                return <CandidateEnrichmentPage {...pageProps} />;
            case '/quality-analytics':
                return <QualityAnalyticsPage {...pageProps} />;
            default:
                return <LandingPage {...pageProps} />;
        }
    }

    return (
        <div className="font-arabic">
            <main>
                {renderPage()}
            </main>
        </div>
    );
};

export default ElectionManagementView;

import React, { useState, useEffect } from 'react';
import { Governorate, Event, Language } from '../../types.ts';
import { CalendarIcon, LocationIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface EventsViewProps {
    selectedGovernorate: Governorate | 'All';
    selectedParty: string | 'All';
    language: Language;
}

const EventCard: React.FC<{ event: Event, language: Language }> = ({ event, language }) => {
    const texts = UI_TEXT[language];
    const eventDate = new Date(event.date);
    const dateOptions: Intl.DateTimeFormatOptions = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    const timeOptions: Intl.DateTimeFormatOptions = { hour: '2-digit', minute: '2-digit', hour12: true };

    return (
        <div className="glass-card rounded-lg shadow-lg overflow-hidden flex flex-col sm:flex-row">
            <div className="p-5 flex-grow">
                <p className="text-sm font-bold text-primary">{eventDate.toLocaleDateString(language, dateOptions)}</p>
                <h3 className="text-xl font-bold text-theme-text-base mt-1">{event.title}</h3>

                <div className="mt-3 space-y-2 text-sm text-theme-text-muted">
                    <div className="flex items-center space-x-2">
                        <CalendarIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{eventDate.toLocaleTimeString(language, timeOptions)}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                        <LocationIcon className="w-5 h-5 flex-shrink-0" />
                        <span>{event.location}</span>
                    </div>
                </div>
                
                 <div className="mt-4 flex items-center space-x-3">
                    <img src={event.organizer.avatarUrl} alt={event.organizer.name} className="w-8 h-8 rounded-full" />
                    <span className="text-xs font-semibold text-theme-text-muted">{event.organizer.name}</span>
                </div>
            </div>
            <div className="bg-black/20 px-5 py-4 flex items-center justify-center">
                 <button className="w-full sm:w-auto px-6 py-2 text-sm font-bold text-on-primary bg-primary rounded-full transition-all hover:brightness-110">
                    {texts.rsvp}
                </button>
            </div>
        </div>
    );
};

const EventsView: React.FC<EventsViewProps> = ({ selectedGovernorate, selectedParty, language }) => {
    const [events, setEvents] = useState<Event[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchEvents = async () => {
            setIsLoading(true);
            try {
                const data = await api.getEvents({ governorate: selectedGovernorate, party: selectedParty });
                setEvents(data);
            } catch (error) {
                console.error("Failed to fetch events:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchEvents();
    }, [selectedGovernorate, selectedParty]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.upcomingEvents}</h2>
            {isLoading ? (
                <Spinner />
            ) : (
                <div className="space-y-6">
                    {events.length > 0 ? (
                        events.map(event => <EventCard key={event.id} event={event} language={language} />)
                    ) : (
                        <p className="text-theme-text-muted text-center mt-8">
                            {texts.noEventsScheduled}
                        </p>
                    )}
                </div>
            )}
        </div>
    );
};

export default EventsView;

import React from 'react';
import { Post, User } from '../../types.ts';
import { VerifiedIcon, HeartIcon, CommentIcon, ShareIcon, DonateIcon, ArrowLeftIcon } from '../icons/Icons.tsx';

interface FullScreenReelViewProps {
    reel: Post;
    onClose: () => void;
    user: User | null;
    requestLogin: () => void;
}

const FullScreenReelView: React.FC<FullScreenReelViewProps> = ({ reel, onClose, user, requestLogin }) => {
    
    const handleInteraction = (e: React.MouseEvent) => {
        if (!user) {
            e.preventDefault();
            e.stopPropagation();
            requestLogin();
        }
    };

    return (
        <div className="fixed inset-0 bg-black z-50 flex items-center justify-center animate-fade-in">
            <div className="relative h-full w-full max-w-md bg-black">
                
                <video
                    src={reel.mediaUrl}
                    className="w-full h-full object-contain"
                    controls
                    autoPlay
                    loop
                    playsInline
                />

                {/* Back Button */}
                <button 
                    onClick={onClose}
                    className="absolute top-4 left-4 text-white bg-black/50 rounded-full p-2 hover:bg-black/75 transition-colors z-20"
                    aria-label="Close reel view"
                >
                    <ArrowLeftIcon className="w-6 h-6" />
                </button>

                {/* Overlaid UI */}
                <div className="absolute bottom-0 left-0 right-0 p-4 bg-gradient-to-t from-black/70 to-transparent text-white z-10">
                    <div className="flex items-end">
                        <div className="flex-1">
                            <div className="flex items-center space-x-2">
                                <img className="w-10 h-10 rounded-full border-2 border-white" src={reel.author.avatarUrl} alt={reel.author.name} />
                                <div>
                                    <h3 className="font-semibold text-sm flex items-center">{reel.author.name} {reel.author.verified && <VerifiedIcon className="w-4 h-4 ml-1 text-white" />}</h3>
                                    <button onClick={handleInteraction} className="px-3 py-0.5 text-xs font-bold bg-white text-mocha-black rounded-md mt-1 hover:bg-neutral-gray-light">Follow</button>
                                </div>
                            </div>
                            <p className="text-sm mt-2">{reel.content}</p>
                            {reel.isSponsored && <p className="text-xs font-bold mt-1 bg-yellow-400 text-black inline-block px-2 py-0.5 rounded">Sponsored</p>}
                        </div>
                        <div className="flex flex-col items-center space-y-4">
                             <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><HeartIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.likes}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><CommentIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.comments}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                               <div className="w-12 h-12 flex items-center justify-center bg-white/20 rounded-full hover:bg-white/30"><ShareIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">{reel.shares}</span>
                            </button>
                            <button onClick={handleInteraction} className="flex flex-col items-center">
                                <div className="w-12 h-12 flex items-center justify-center bg-flag-green rounded-full hover:bg-green-700"><DonateIcon className="w-7 h-7" /></div>
                                <span className="text-xs font-bold drop-shadow-md">Donate</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FullScreenReelView;
import React, { useState, useEffect, Suspense, lazy } from 'react';
import { User, UserRole, Governorate, Language, MainContentTab, AppTab, Post } from '../../types.ts';
import { GOVERNORATES, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';

import HeroSection from '../HeroSection.tsx';
import Stories from '../Stories.tsx';
import ComposeView from './ComposeView.tsx';
import PostCard from '../PostCard.tsx';
import TopNavBar from '../TopNavBar.tsx';
import Spinner from '../Spinner.tsx';
import ReelsView from './ReelsView.tsx';
import CandidatesView from './CandidatesView.tsx';
import ReelComposer from './compose/ReelComposer.tsx';
import SkeletonPostCard from '../SkeletonPostCard.tsx';

// Lazy load views
const WhisperView = lazy(() => import('./WhisperView.tsx'));
const WomenCandidatesView = lazy(() => import('./WomenCandidatesView.tsx'));
const MinoritiesView = lazy(() => import('./MinoritiesView.tsx'));
const CrossPlatformNavigationView = lazy(() => import('./CrossPlatformNavigationView.tsx'));


interface HomeViewProps {
    user: User | null;
    requestLogin: () => void;
    selectedGovernorate: Governorate | 'All';
    onGovernorateChange: (gov: Governorate | 'All') => void;
    selectedParty: string | 'All';
    onPartyChange: (party: string | 'All') => void;
    parties: string[];
    onSelectProfile: (profile: User) => void;
    onSelectReel: (reel: Post) => void;
    onSelectPost: (post: Post) => void;
    onSelectStory: (user: User) => void;
    language: Language;
    activeTab: MainContentTab;
    onTabChange: (tab: MainContentTab) => void;
    onCompose: () => void;
}

const SUB_TABS: MainContentTab[] = [AppTab.Feed, AppTab.Real, AppTab.Candidates, AppTab.Women, AppTab.Minorities, AppTab.Whisper, AppTab.Components];

const getThemeClassForTab = (tab: MainContentTab) => {
    switch (tab) {
        case AppTab.Real: return 'theme-reels';
        case AppTab.Candidates: return 'theme-candidates';
        case AppTab.Whisper: return 'theme-whisper';
        default: return 'theme-default';
    }
};

const HomeView: React.FC<HomeViewProps> = ({ user, requestLogin, selectedGovernorate, onGovernorateChange, selectedParty, onPartyChange, parties, onSelectProfile, onSelectReel, onSelectPost, onSelectStory, language, activeTab, onTabChange, onCompose }) => {
    
    // --- STATE FOR ASYNC DATA ---
    const [socialPosts, setSocialPosts] = useState<Post[]>([]);
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoadingPosts, setIsLoadingPosts] = useState(false);
    const [genderFilter, setGenderFilter] = useState<'All' | 'Male' | 'Female'>('All');

    // --- DATA FETCHING FOR FEED ---
    useEffect(() => {
        if (activeTab === AppTab.Feed) {
            const fetchFeedData = async () => {
                setIsLoadingPosts(true);
                try {
                    const postsPromise = api.getPosts({ governorate: selectedGovernorate, party: selectedParty });
                    const candidatesPromise = api.getUsers({ role: UserRole.Candidate, governorate: selectedGovernorate, party: selectedParty });
                    const [postsData, candidatesData] = await Promise.all([postsPromise, candidatesPromise]);
                    setSocialPosts(postsData);
                    setCandidates(candidatesData); // Used for stories and who-to-follow
                } catch (error) {
                    console.error("Failed to fetch feed data:", error);
                } finally {
                    setIsLoadingPosts(false);
                }
            };
            fetchFeedData();
        }
    }, [activeTab, selectedGovernorate, selectedParty]);

    // --- API HANDLERS ---
    const handlePost = (postDetails: Partial<Post>) => {
        if (!user) return;
        api.createPost(postDetails, user).then(newPost => {
            if (activeTab === AppTab.Feed) {
                setSocialPosts(prevPosts => [newPost, ...prevPosts]);
            }
            alert("Post created successfully (simulation).");
        });
    };
    
    const handleCreateReel = (reelDetails: { caption: string; videoFile?: File }) => {
        if (!user) return;
        api.createReel(reelDetails, user).then(newReel => {
            console.log("New reel created (simulation):", newReel);
            alert("Reel created successfully (simulation).");
        });
    };

    const handleFollow = (e: React.MouseEvent, candidateId: string) => {
        if (!user) {
            e.preventDefault();
            requestLogin();
        } else {
            api.followCandidate(candidateId);
        }
    };

    // --- DERIVED DATA & TEXTS ---
    const candidatesToFollow = candidates.filter(c => c.id !== user?.id).slice(0, 3);
    const storyCandidates = candidates.slice(0, 10);
    const texts = UI_TEXT[language];
    
    const FilterBar = () => (
        <div className="flex flex-col sm:flex-row gap-4 p-3 glass-card my-4 rounded-lg shadow-lg">
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="gov-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.governorate}</label>
                <select id="gov-filter" value={selectedGovernorate} onChange={(e) => onGovernorateChange(e.target.value as Governorate | 'All')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.allIraq}</option>
                    {GOVERNORATES.map(gov => <option key={gov} value={gov}>{GOVERNORATE_AR_MAP[gov]}</option>)}
                </select>
            </div>
            <div className="flex-1 min-w-[120px]">
                <label htmlFor="party-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.party}</label>
                <select id="party-filter" value={selectedParty} onChange={(e) => onPartyChange(e.target.value)} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    {parties.map(party => <option key={party} value={party}>{party}</option>)}
                </select>
            </div>
             <div className="flex-1 min-w-[120px]">
                <label htmlFor="gender-filter" className="block text-xs font-medium text-theme-text-muted font-arabic">{texts.gender}</label>
                <select id="gender-filter" value={genderFilter} onChange={(e) => setGenderFilter(e.target.value as 'All' | 'Male' | 'Female')} className="mt-1 block w-full p-1.5 border border-white/20 rounded-md bg-white/10 text-theme-text-base text-sm focus:outline-none focus:ring-1 focus:ring-primary font-arabic text-right">
                    <option value="All">{texts.all}</option>
                    <option value="Male">{texts.male}</option>
                    <option value="Female">{texts.female}</option>
                </select>
            </div>
        </div>
    );
    
    // --- RENDER LOGIC ---
    const renderTabContent = () => {
        switch (activeTab) {
            case AppTab.Feed:
                const postsWithStories = socialPosts.reduce((acc, post, index) => {
                    acc.push(<PostCard key={post.id} post={post} user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />);
                    if ((index + 1) % 4 === 0) {
                        acc.push(<div key={`stories-${index}`} className="my-6"><Stories users={storyCandidates} onSelectStory={onSelectStory} /></div>);
                    }
                    return acc;
                }, [] as React.ReactNode[]);

                return (
                    <>
                        <div className="mt-6"><Stories users={storyCandidates} onSelectStory={onSelectStory}/></div>
                        <div className="mt-6"><HeroSection /></div>
                        <div className="mt-4">
                            {user ? <ComposeView user={user} onPost={handlePost} language={language} postType="Post" />
                                : <div onClick={requestLogin} className="glass-card rounded-lg p-3 flex items-center space-x-4 cursor-pointer hover:border-primary"><div className="flex-1 text-theme-text-muted font-arabic">{texts.whatsOnYourMind}</div><button className="px-4 py-2 text-sm font-bold bg-primary text-on-primary rounded-full">{texts.post}</button></div>
                            }
                        </div>
                        <div className="mt-4">
                            {isLoadingPosts ? [...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)
                                : postsWithStories.length > 0 ? postsWithStories
                                : <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
                            }
                        </div>
                    </>
                );
            case AppTab.Real:
                return (
                    <div className="mt-4">
                        {user?.role === UserRole.Candidate && <div className="mb-4"><ReelComposer user={user} onCreateReel={handleCreateReel} /></div>}
                        <ReelsView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} onSelectReel={onSelectReel} user={user} requestLogin={requestLogin} language={language} />
                    </div>
                );
            case AppTab.Candidates:
                 return (
                    <div className="mt-6">
                        <FilterBar />
                        <CandidatesView selectedGovernorate={selectedGovernorate} selectedParty={selectedParty} selectedGender={genderFilter} onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language}/>
                    </div>
                );
            case AppTab.Women:
                return (
                    <Suspense fallback={<Spinner />}>
                        <WomenCandidatesView onSelectCandidate={onSelectProfile} user={user} requestLogin={requestLogin} language={language} />
                    </Suspense>
                );
            case AppTab.Minorities:
                return (
                    <Suspense fallback={<Spinner />}>
                        <MinoritiesView language={language} />
                    </Suspense>
                );
            case AppTab.Whisper:
                return (
                     <div className="mt-4">
                        {user && <div className="mb-4"><ComposeView user={user} onPost={handlePost} language={language} postType="Whisper" /></div>}
                         <Suspense fallback={<Spinner/>}>
                            <WhisperView user={user} requestLogin={requestLogin} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />
                         </Suspense>
                    </div>
                );
            case AppTab.Components:
                return (
                    <Suspense fallback={<Spinner />}>
                        <CrossPlatformNavigationView onNavigateToCandidates={() => onTabChange(AppTab.Candidates)} onQrScan={() => alert('QR Scan not implemented yet.')} />
                    </Suspense>
                );
            default:
                if (isLoadingPosts) return <Spinner />;
                return null;
        }
    };

    return (
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6 p-0 sm:p-6">
            {/* Main Content Column */}
            <main className="lg:col-span-3">
                 {/* Non-sticky TopNavBar */}
                <div className="z-10 py-2 sticky top-14 lg:top-0 glass-nav lg:glass-card lg:rounded-t-xl">
                    <TopNavBar<MainContentTab>
                        tabs={SUB_TABS}
                        activeTab={activeTab}
                        onTabChange={onTabChange}
                        language={language}
                    />
                </div>
                
                <div className={`tab-content-wrapper ${getThemeClassForTab(activeTab)} px-4 sm:px-0`}>
                    {renderTabContent()}
                </div>
            </main>

            {/* Right Sidebar (Desktop) */}
            <aside className="hidden lg:block lg:col-span-1 space-y-6 pt-2">
                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.whoToFollow}</h3>
                    <div className="space-y-3">
                        {candidatesToFollow.length > 0 ? candidatesToFollow.map(candidate => (
                            <div key={candidate.id} className="flex items-center justify-between">
                                <div className="flex items-center space-x-3 cursor-pointer" onClick={() => onSelectProfile(candidate)}>
                                    <img src={candidate.avatarUrl} alt={candidate.name} className="w-10 h-10 rounded-full" />
                                    <div>
                                        <p className="font-semibold text-sm">{candidate.name}</p>
                                        <p className="text-xs text-theme-text-muted">{candidate.party}</p>
                                    </div>
                                </div>
                                <button onClick={(e) => handleFollow(e, candidate.id)} className="px-3 py-1 text-xs font-semibold rounded-full bg-primary text-on-primary transition-all hover:brightness-110">{texts.follow}</button>
                            </div>
                        )) : <p className="text-xs text-theme-text-muted">{texts.noCandidatesToShow}</p>}
                    </div>
                </div>

                <div className="glass-card rounded-lg p-4">
                    <h3 className="font-bold mb-3 font-arabic">{texts.platformRules}</h3>
                    <ul className="text-sm space-y-2 list-disc list-inside text-theme-text-muted font-arabic">
                        <li>{texts.rule1}</li>
                        <li>{texts.rule2}</li>
                        <li>{texts.rule3}</li>
                        <li>{texts.rule4}</li>
                    </ul>
                </div>
            </aside>
        </div>
    );
};

export default HomeView;
import React from 'react';

const ManagementView: React.FC = () => {
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-slate-100">⚙️ Management</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-slate-300">The platform Management tools will be available here.</p>
                <p>This section is under construction.</p>
            </div>
        </div>
    );
};

export default ManagementView;
import React from 'react';
import { Language } from '../../types.ts';
import { UI_TEXT } from '../../translations.ts';

const MinoritiesView: React.FC<{ language: Language }> = ({ language }) => {
    const texts = UI_TEXT[language];
    return (
        <div className="p-4 sm:p-6">
            <h1 className="text-2xl font-bold text-white text-center">{texts.minorities}</h1>
            <div className="mt-4 glass-card rounded-lg p-6 text-center">
                <p className="text-theme-text-muted">{texts.underConstruction}</p>
                <p>A dedicated space to discover and support candidates from minority groups.</p>
            </div>
        </div>
    );
};

export default MinoritiesView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Governorate, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PublicDiscoverCandidateCard from '../PublicDiscoverCandidateCard.tsx';
import { SLUG_PARTY_MAP, SLUG_GOVERNORATE_MAP, GOVERNORATE_AR_MAP } from '../../constants.ts';
import { UI_TEXT } from '../../translations.ts';

interface PublicDiscoverViewProps {
    language: Language;
}

const PublicDiscoverView: React.FC<PublicDiscoverViewProps> = ({ language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [partyName, setPartyName] = useState('');
    const [governorateName, setGovernorateName] = useState('');
    const [governorateArName, setGovernorateArName] = useState('');
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchCandidates = async () => {
            setIsLoading(true);
            try {
                const params = new URLSearchParams(window.location.search);
                const partySlug = params.get('party');
                const govSlug = params.get('gov');

                // Set header text
                const party = partySlug ? SLUG_PARTY_MAP[partySlug] : '';
                const governorate = govSlug ? SLUG_GOVERNORATE_MAP[govSlug] : '';
                setPartyName(party);
                setGovernorateName(governorate);
                
                // Set Arabic name for governorate
                if(governorate && GOVERNORATE_AR_MAP[governorate as Governorate]){
                    setGovernorateArName(GOVERNORATE_AR_MAP[governorate as Governorate]);
                }

                // Fetch candidates based on slugs
                if (partySlug && govSlug) {
                    const filteredCandidates = await api.getUsers({
                        role: UserRole.Candidate,
                        partySlug,
                        governorateSlug: govSlug,
                    });
                    setCandidates(filteredCandidates);
                }
            } catch (error) {
                console.error("Failed to fetch candidates for discovery:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchCandidates();
    }, []);

    const pageTitle = partyName && governorateArName 
        ? `${texts.candidates} ${partyName} ${language === 'ar' ? 'في' : 'in'} ${governorateArName}`
        : texts.discoverCandidates;

    return (
        <div className="p-4 sm:p-6 max-w-5xl mx-auto">
            <h1 className="text-3xl font-bold text-white mb-4 text-center font-arabic">{pageTitle}</h1>
            <p className="text-center text-slate-200 mb-8">
                {texts.discoverCandidatesDesc}
            </p>
            {isLoading ? (
                <p className="text-slate-300 text-center mt-8">{texts.loadingCandidates}</p>
            ) : candidates.length > 0 ? (
                <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
                    {candidates.map(candidate => (
                        <PublicDiscoverCandidateCard 
                            key={candidate.id}
                            candidate={candidate}
                            language={language}
                        />
                    ))}
                </div>
            ) : (
                 <p className="text-slate-200 text-center mt-8 glass-card p-8 rounded-lg">
                    {texts.noCandidatesFoundQR}
                </p>
            )}
        </div>
    );
};

export default PublicDiscoverView;
import React, { useState, useEffect } from 'react';
import { Governorate, Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import ReelCard from '../ReelCard.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface ReelsViewProps {
  selectedGovernorate: Governorate | 'All';
  selectedParty: string | 'All';
  onSelectReel: (reel: Post) => void;
  user: User | null;
  requestLogin: () => void;
  language: Language;
}

const ReelsView: React.FC<ReelsViewProps> = ({ selectedGovernorate, selectedParty, onSelectReel, user, requestLogin, language }) => {
  const [reelPosts, setReelPosts] = useState<Post[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const texts = UI_TEXT[language];

  useEffect(() => {
    const fetchReels = async () => {
      setIsLoading(true);
      try {
        const reels = await api.getPosts({ type: 'Reel', governorate: selectedGovernorate, party: selectedParty });
        setReelPosts(reels);
      } catch (error) {
        console.error("Failed to fetch reels:", error);
      } finally {
        setIsLoading(false);
      }
    };
    fetchReels();
  }, [selectedGovernorate, selectedParty]);

  if (isLoading) {
    return <Spinner />;
  }

  return (
    <div className="p-4 sm:p-6">
      {reelPosts.length > 0 ? (
        <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
            {reelPosts.map(post => (
                <ReelCard 
                    key={post.id} 
                    reel={post} 
                    onSelectReel={onSelectReel} 
                />
            ))}
        </div>
      ) : (
        <div className="flex items-center justify-center h-full text-center text-theme-text-muted py-16">
          <p>{texts.noReelsFound}</p>
        </div>
      )}
    </div>
  );
};

export default ReelsView;
import React, { useState, useEffect } from 'react';
import { Governorate, Article, Language } from '../../types.ts';
import { LinkIcon } from '../icons/Icons.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface SeriousnessViewProps {
    selectedGovernorate: Governorate | 'All';
    language: Language;
}

const ArticleCard: React.FC<{ article: Article }> = ({ article }) => {
    return (
        <div className="glass-card rounded-lg shadow-sm p-5 flex flex-col h-full transition-transform duration-300 hover:scale-[1.02] hover:-translate-y-1">
            <div className="flex-grow">
                <div className="flex justify-between items-start mb-2">
                    <span className="text-xs font-bold uppercase tracking-wider text-theme-text-muted">{article.source}</span>
                    <span className="text-xs text-theme-text-muted">{article.timestamp}</span>
                </div>
                <h3 className="text-lg font-bold text-theme-text-base">{article.title}</h3>
                <p className="text-sm text-theme-text-muted mt-1">by {article.authorName}</p>
                <p className="mt-3 text-theme-text-base text-sm">
                    {article.contentSnippet}
                </p>
            </div>
            <div className="mt-4 pt-4 border-t border-[var(--color-glass-border)]">
                <a href={article.url} target="_blank" rel="noopener noreferrer" className="inline-flex items-center space-x-2 text-sm font-semibold text-primary hover:underline">
                    <LinkIcon className="w-4 h-4" />
                    <span>Read Full Article</span>
                </a>
            </div>
        </div>
    );
}

const SeriousnessView: React.FC<SeriousnessViewProps> = ({ selectedGovernorate, language }) => {
    const [articles, setArticles] = useState<Article[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchArticles = async () => {
            setIsLoading(true);
            try {
                const data = await api.getArticles({ governorate: selectedGovernorate });
                setArticles(data);
            } catch (error) {
                console.error("Failed to fetch articles:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchArticles();
    }, [selectedGovernorate]);

    return (
        <div className="p-4 sm:p-6">
            <h2 className="text-2xl font-bold text-white mb-4">{texts.articles}</h2>
            {isLoading ? (
                 <Spinner />
            ) : articles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    {articles.map(article => <ArticleCard key={article.id} article={article} />)}
                </div>
            ) : (
                <p className="text-theme-text-muted col-span-full text-center mt-8">
                    No articles found for the selected filters.
                </p>
            )}
        </div>
    );
};

export default SeriousnessView;
import React, { useState } from 'react';
import { ThemeName, Language } from '../../types.ts';
import ColorThemeSelector from '../UI/ColorThemeSelector.tsx';
import { UI_TEXT } from '../../translations.ts';

interface SettingsViewProps {
    isHighContrast: boolean;
    onToggleContrast: () => void;
    activeTheme: ThemeName;
    onChangeTheme: (theme: ThemeName) => void;
    language: Language;
}

const ToggleSwitch: React.FC<{
    label: string;
    description: string;
    checked: boolean;
    onChange: () => void;
}> = ({ label, description, checked, onChange }) => {
    return (
        <div className="flex justify-between items-center py-4">
            <div>
                <h4 className="font-semibold">{label}</h4>
                <p className="text-sm text-theme-text-muted">{description}</p>
            </div>
            <label className="relative inline-flex items-center cursor-pointer">
                <input type="checkbox" checked={checked} onChange={onChange} className="sr-only peer" />
                <div className="w-11 h-6 bg-gray-200 dark:bg-gray-600 rounded-full peer peer-focus:ring-4 peer-focus:ring-primary/50 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
            </label>
        </div>
    );
};

const SettingsView: React.FC<SettingsViewProps> = ({ isHighContrast, onToggleContrast, activeTheme, onChangeTheme, language }) => {
    const [largeText, setLargeText] = useState(false);
    const [ttsEnabled, setTtsEnabled] = useState(true);
    const texts = UI_TEXT[language];

    return (
        <div className="max-w-3xl mx-auto p-4">
            <h2 className="text-2xl font-bold mb-4">{texts.accessibilityDisplay}</h2>
            <div className="glass-card rounded-lg shadow-sm p-6 space-y-4 divide-y divide-[var(--color-glass-border)]">
                <ColorThemeSelector currentTheme={activeTheme} onChangeTheme={onChangeTheme} language={language} />
                <ToggleSwitch
                    label={texts.highContrast}
                    description={texts.highContrastDesc}
                    checked={isHighContrast}
                    onChange={onToggleContrast}
                />
                <ToggleSwitch
                    label={texts.largeText}
                    description={texts.largeTextDesc}
                    checked={largeText}
                    onChange={() => setLargeText(p => !p)}
                />
                 <ToggleSwitch
                    label={texts.tts}
                    description={texts.ttsDesc}
                    checked={ttsEnabled}
                    onChange={() => setTtsEnabled(p => !p)}
                />
            </div>
        </div>
    );
};

export default SettingsView;
import React, { useState, useEffect, useRef } from 'react';
import { User, Post, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import { XMarkIcon } from '../icons/Icons.tsx';
import { UI_TEXT } from '../../translations.ts';

interface StoryViewModalProps {
    storyUser: User;
    onClose: () => void;
    onSelectProfile: (user: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const StoryViewModal: React.FC<StoryViewModalProps> = ({ storyUser, onClose, onSelectProfile, user, requestLogin, language }) => {
    const [stories, setStories] = useState<Post[]>([]);
    const [currentIndex, setCurrentIndex] = useState(0);
    const [isLoading, setIsLoading] = useState(true);
    const timerRef = useRef<number | null>(null);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchStories = async () => {
            setIsLoading(true);
            const userPosts = await api.getPosts({ authorId: storyUser.id });
            const storyPosts = userPosts.filter(p => p.mediaUrl).slice(0, 8); // Limit to 8 stories
            
            if (storyPosts.length === 0) {
                 // If no stories, close modal after a short delay
                setTimeout(onClose, 500);
            } else {
                setStories(storyPosts);
                setIsLoading(false);
                setCurrentIndex(0);
            }
        };
        fetchStories();
    }, [storyUser, onClose]);

    const goToNext = () => {
        setCurrentIndex(prev => {
            if (prev < stories.length - 1) {
                return prev + 1;
            }
            onClose(); // Close after the last story
            return prev;
        });
    };

    const goToPrev = () => {
        setCurrentIndex(prev => (prev > 0 ? prev - 1 : 0));
    };

    useEffect(() => {
        if (timerRef.current) clearTimeout(timerRef.current);
        if (stories.length === 0 || isLoading) return;

        const currentStory = stories[currentIndex];
        // Treat Reels as video stories, anything else with media as an image story
        if (currentStory.type !== 'Reel') {
            timerRef.current = window.setTimeout(() => {
                goToNext();
            }, 5000); // 5 seconds for images
        }
        
        return () => {
            if (timerRef.current) clearTimeout(timerRef.current);
        }
    }, [currentIndex, stories, isLoading, goToNext]);

    const handleVideoEnd = () => {
        goToNext();
    };

    const ProgressBar = () => (
        <div className="absolute top-4 left-2 right-2 z-20 flex gap-1">
            {stories.map((_, index) => (
                <div key={index} className="flex-1 h-1 bg-white/30 rounded-full overflow-hidden">
                    {index < currentIndex && <div className="h-1 bg-white rounded-full w-full" />}
                    {index === currentIndex && (
                        <div
                            key={currentIndex} // Reset animation on change
                            className="h-1 bg-white rounded-full story-progress-bar"
                            style={{ animationDuration: stories[currentIndex].type === 'Reel' ? '0s' : '5s' }}
                        />
                    )}
                </div>
            ))}
        </div>
    );

    const currentStory = stories[currentIndex];

    if (isLoading) {
        return (
            <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.loadingStories}
            </div>
        );
    }
    
    if (stories.length === 0) {
        // This state is brief before onClose is called, but good to handle
        return (
             <div className="fixed inset-0 bg-black z-50 flex items-center justify-center text-white">
                {texts.noStories}
             </div>
        );
    }

    return (
        <div className="fixed inset-0 bg-black z-50">
            {currentStory && (
                <>
                    <ProgressBar />

                    <div className="absolute top-6 left-2 right-2 z-20 flex items-center justify-between p-2">
                        <button onClick={() => onSelectProfile(storyUser)} className="flex items-center gap-2 group">
                            <img src={storyUser.avatarUrl} className="w-8 h-8 rounded-full" alt={storyUser.name} />
                            <span className="text-white font-bold text-sm group-hover:underline">{storyUser.name}</span>
                        </button>
                        <button onClick={onClose} className="p-1 rounded-full bg-black/30 hover:bg-black/60">
                            <XMarkIcon className="w-6 h-6 text-white"/>
                        </button>
                    </div>

                    <div className="w-full h-full flex items-center justify-center p-2">
                        {currentStory.type === 'Reel' ? (
                            <video 
                                key={currentStory.id} 
                                src={currentStory.mediaUrl} 
                                className="max-w-full max-h-full rounded-lg" 
                                autoPlay 
                                onEnded={handleVideoEnd}
                                playsInline
                            />
                        ) : (
                            <img src={currentStory.mediaUrl} className="max-w-full max-h-full rounded-lg" alt="Story content" />
                        )}
                    </div>
                    
                    <div className="absolute top-1/2 -translate-y-1/2 left-0 right-0 h-full flex justify-between">
                        <button onClick={goToPrev} className="w-1/3 h-full" aria-label="Previous story"></button>
                        <button onClick={goToNext} className="w-1/3 h-full" aria-label="Next story"></button>
                    </div>
                </>
            )}
        </div>
    );
};

export default StoryViewModal;
import React, { useState, useEffect } from 'react';
import { User, Language, TeaHouseTopic, TeaHouseMessage } from '../../types.ts';
import { TeaHouseIcon, ArrowLeftIcon, MicIcon, DocumentIcon, PhotoIcon, PencilIcon } from '../icons/Icons.tsx';
import CreateTopicModal from '../CreateTopicModal.tsx';
import { UI_TEXT } from '../../translations.ts';
import * as api from '../../services/apiService.ts';
import Spinner from '../Spinner.tsx';

interface TeaHouseViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const TeaHouseView: React.FC<TeaHouseViewProps> = ({ user, requestLogin, language }) => {
    const [topics, setTopics] = useState<TeaHouseTopic[]>([]);
    const [messages, setMessages] = useState<TeaHouseMessage[]>([]);
    const [selectedTopic, setSelectedTopic] = useState<TeaHouseTopic | null>(null);
    const [isCreateModalOpen, setCreateModalOpen] = useState(false);
    const [newMessage, setNewMessage] = useState('');
    const [isLoadingTopics, setIsLoadingTopics] = useState(true);
    const [isLoadingMessages, setIsLoadingMessages] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchTopics = async () => {
            setIsLoadingTopics(true);
            try {
                const fetchedTopics = await api.getTeaHouseTopics(language);
                setTopics(fetchedTopics);
            } catch (error) {
                console.error("Failed to fetch Tea House topics:", error);
            } finally {
                setIsLoadingTopics(false);
            }
        };

        fetchTopics();
        setSelectedTopic(null);
    }, [language]);

    useEffect(() => {
        if (selectedTopic) {
            const fetchMessages = async () => {
                setIsLoadingMessages(true);
                try {
                    const fetchedMessages = await api.getTeaHouseMessages(selectedTopic.id);
                    setMessages(fetchedMessages);
                } catch (error) {
                    console.error("Failed to fetch messages for topic:", selectedTopic.id, error);
                } finally {
                    setIsLoadingMessages(false);
                }
            };
            fetchMessages();
        }
    }, [selectedTopic]);


    const handleCreateTopic = async (data: { title: string; firstMessage: string; category: string; language: Language }) => {
        try {
            const newTopic = await api.createTeaHouseTopic(data);
            setTopics(prev => [newTopic, ...prev]);
            setCreateModalOpen(false);
        } catch (error) {
            console.error("Failed to create topic:", error);
            alert("Failed to create topic. Please try again.");
        }
    };

    const handleSendMessage = () => {
        if (!newMessage.trim() || !selectedTopic) return;
        console.log("Sending message (simulation):", newMessage);
        // In a real app, you'd call an API to send the message.
        setNewMessage('');
    };
    
    // --- RENDER LOGIC ---

    if (selectedTopic) {
        // Conversation View
        return (
            <div className="flex flex-col h-full max-w-2xl mx-auto pb-24">
                <header className="p-4 flex items-center space-x-4 sticky top-0 bg-[var(--color-glass-bg)] backdrop-blur-md">
                    <button onClick={() => setSelectedTopic(null)} className="p-2 rounded-full hover:bg-white/10">
                        <ArrowLeftIcon className="w-6 h-6" />
                    </button>
                    <div>
                        <h2 className="font-bold text-lg">{selectedTopic.title}</h2>
                        <p className="text-xs text-theme-text-muted">{selectedTopic.participants} participants</p>
                    </div>
                </header>

                <main className="flex-grow p-4 space-y-4 overflow-y-auto">
                    {isLoadingMessages ? <Spinner /> : messages.map((msg) => (
                        <div key={msg.id} className={`flex items-end gap-2 ${msg.author.id === user?.id ? 'justify-end' : 'justify-start'}`}>
                            {msg.author.id !== user?.id && <img src={msg.author.avatarUrl} alt={msg.author.name} className="w-8 h-8 rounded-full" />}
                            <div className={`message-bubble ${msg.author.id === user?.id ? 'is-user' : 'is-other'}`}>
                                {msg.type === 'text' && <p>{msg.content}</p>}
                                {msg.type === 'image' && <img src={msg.mediaUrl} alt="shared" className="rounded-lg max-w-xs" />}
                                {msg.type === 'document' && msg.mediaUrl && (
                                     <a href={msg.mediaUrl} target="_blank" rel="noopener noreferrer" className="flex items-center space-x-2 p-2 bg-black/20 rounded-lg hover:bg-black/40">
                                        <DocumentIcon className="w-6 h-6 flex-shrink-0" />
                                        <span className="text-sm font-medium truncate">{msg.content}</span>
                                     </a>
                                )}
                                <p className="text-xs opacity-70 mt-1 text-right">{msg.timestamp}</p>
                            </div>
                        </div>
                    ))}
                </main>

                <footer className="fixed bottom-0 left-0 right-0 lg:left-64 teahouse-composer p-2">
                     <div className="max-w-2xl mx-auto flex items-center space-x-2">
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><PhotoIcon className="w-6 h-6"/></button>
                        <button className="p-3 rounded-full hover:bg-white/10 text-theme-text-muted"><DocumentIcon className="w-6 h-6"/></button>
                        <input
                            type="text"
                            value={newMessage}
                            onChange={(e) => setNewMessage(e.target.value)}
                            placeholder={texts.typeAMessage}
                            className="flex-grow p-3 border border-[var(--color-glass-border)] rounded-full bg-white/10 placeholder-theme-text-muted focus:outline-none focus:ring-1 focus:ring-primary"
                        />
                        <button onClick={handleSendMessage} className="p-3 rounded-full bg-primary text-on-primary hover:brightness-110">
                            <PencilIcon className="w-6 h-6" />
                        </button>
                    </div>
                </footer>
            </div>
        );
    }

    // Topic List View
    return (
        <div className="p-4 sm:p-6 max-w-2xl mx-auto">
            <div className="text-center mb-8">
                <h1 className="text-3xl font-bold font-arabic">{texts.teaHouse}</h1>
                <p className="text-theme-text-muted mt-1">
                    {texts.discussionsInLang}
                </p>
            </div>
            
            <div className="text-center mb-6">
                 <button 
                    onClick={() => user ? setCreateModalOpen(true) : requestLogin()}
                    className="send-btn max-w-xs"
                 >
                    {texts.createNewDiscussion}
                </button>
            </div>
            
            {isLoadingTopics ? <Spinner /> : (
                <div className="space-y-3">
                    {topics.map(topic => (
                        <div key={topic.id} onClick={() => user ? setSelectedTopic(topic) : requestLogin()} className="glass-card p-4 rounded-lg cursor-pointer hover:border-primary">
                            <div className="flex justify-between items-start">
                                <div>
                                    <h3 className="font-bold text-lg">{topic.title}</h3>
                                    <p className="text-sm text-theme-text-muted">{topic.lastMessage}</p>
                                </div>
                                <span className="text-xs text-theme-text-muted whitespace-nowrap">{topic.lastActivity}</span>
                            </div>
                            <div className="text-xs text-theme-text-muted mt-2">{topic.participants} participants</div>
                        </div>
                    ))}
                    {topics.length === 0 && (
                        <p className="text-center text-theme-text-muted py-10">{texts.noDiscussionsFound}</p>
                    )}
                </div>
            )}
            
            {isCreateModalOpen && <CreateTopicModal onClose={() => setCreateModalOpen(false)} onCreate={handleCreateTopic} defaultLanguage={language} language={language} />}
        </div>
    );
};

export default TeaHouseView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Post, Language } from '../../types.ts';
import { VerifiedIcon, EditIcon } from '../icons/Icons.tsx';
import PostCard from '../PostCard.tsx';
import ComposeView from './ComposeView.tsx';
import EditProfileModal from '../EditProfileModal.tsx';
import * as api from '../../services/apiService.ts';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface UserProfileViewProps {
    user: User;
    onUpdateUser: (user: User) => void;
    language: Language;
    onSelectProfile: (profile: User) => void;
    onSelectPost: (post: Post) => void;
}

const UserProfileView: React.FC<UserProfileViewProps> = ({ user, onUpdateUser, language, onSelectProfile, onSelectPost }) => {
    const [userPosts, setUserPosts] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditModalOpen, setEditModalOpen] = useState(false);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchPosts = async () => {
            setIsLoading(true);
            try {
                const posts = await api.getPosts({ authorId: user.id });
                setUserPosts(posts);
            } catch (error) {
                console.error("Failed to fetch user posts:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchPosts();
    }, [user.id]);

    const handlePost = (postDetails: Partial<Post>) => {
        api.createPost(postDetails, user).then(newPost => {
            setUserPosts(prevPosts => [newPost, ...prevPosts]);
        });
    };

    const handleSaveProfile = async (updates: Partial<User>) => {
        const updatedUser = await api.updateUser(user.id, updates);
        if (updatedUser) {
            onUpdateUser(updatedUser);
        }
        setEditModalOpen(false);
    };

    return (
        <div className="max-w-4xl mx-auto p-4 sm:p-6 text-white">
            {/* Profile Header */}
            <div className="glass-card p-6 mb-6 rounded-lg">
                <div className="flex flex-col sm:flex-row items-start space-y-4 sm:space-y-0 sm:space-x-6">
                    <img loading="lazy" className="w-24 h-24 rounded-full ring-4 ring-white/50 shadow-md" src={user.avatarUrl} alt={user.name} />
                    <div className="flex-grow">
                        <div className="flex justify-between items-start">
                             <h2 className="text-2xl font-bold flex items-center">
                                {user.name}
                                {user.verified && <VerifiedIcon className="w-6 h-6 text-brand-hot-pink ml-2" />}
                            </h2>
                            <button
                                onClick={() => setEditModalOpen(true)}
                                className="flex items-center space-x-2 px-3 py-1.5 text-sm font-semibold text-primary bg-primary/10 rounded-md hover:bg-primary/20"
                            >
                                <EditIcon className="w-4 h-4"/>
                                <span>{texts.editProfile}</span>
                            </button>
                        </div>
                        <p className="text-md text-slate-400">{user.party} - {user.governorate}</p>
                        <p className="text-sm mt-2 text-slate-200">{user.bio || texts.noBio}</p>
                    </div>
                </div>
            </div>

            {/* Post Composer */}
            {user.role === UserRole.Candidate && (
                <div className="mb-6">
                    <ComposeView user={user} onPost={handlePost} language={language} />
                </div>
            )}


            {/* User's Post Feed */}
            <div>
                <h3 className="text-xl font-bold mb-4">{texts.myWall}</h3>
                {isLoading ? (
                    <Spinner />
                ) : userPosts.length > 0 ? (
                    userPosts.map(post => <PostCard key={post.id} post={post} user={user} requestLogin={() => {}} language={language} onSelectAuthor={onSelectProfile} onSelectPost={onSelectPost} />)
                ) : (
                    <p className="text-center py-10 text-slate-400">{texts.noPostsYetUser}</p>
                )}
            </div>

            {isEditModalOpen && (
                <EditProfileModal
                    user={user}
                    onClose={() => setEditModalOpen(false)}
                    onSave={handleSaveProfile}
                    language={language}
                />
            )}
        </div>
    );
};

export default UserProfileView;
import React, { useState, useEffect } from 'react';
import { Post, User, Language } from '../../types.ts';
import * as api from '../../services/apiService.ts';
import PostCard from '../PostCard.tsx';
import Spinner from '../Spinner.tsx';
import { UI_TEXT } from '../../translations.ts';
import SkeletonPostCard from '../SkeletonPostCard.tsx';


interface WhisperViewProps {
    user: User | null;
    requestLogin: () => void;
    language: Language;
    onSelectAuthor: (author: User) => void;
    onSelectPost: (post: Post) => void;
}

const WhisperView: React.FC<WhisperViewProps> = ({ user, requestLogin, language, onSelectAuthor, onSelectPost }) => {
    const [whispers, setWhispers] = useState<Post[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchWhispers = async () => {
            setIsLoading(true);
            try {
                // Simulate network delay for better UX
                await new Promise(resolve => setTimeout(resolve, 500));
                const data = await api.getWhispers({});
                setWhispers(data);
            } catch (error) {
                console.error("Failed to fetch whispers:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchWhispers();
    }, []);

    if (isLoading) {
        return (
            <div className="mt-4">
                {[...Array(3)].map((_, i) => <SkeletonPostCard key={i} />)}
            </div>
        );
    }

    return (
        <div className="mt-4">
            {whispers.length > 0 ? (
                whispers.map(post => (
                    <PostCard
                        key={post.id}
                        post={post}
                        user={user}
                        requestLogin={requestLogin}
                        language={language}
                        onSelectAuthor={onSelectAuthor}
                        onSelectPost={onSelectPost}
                    />
                ))
            ) : (
                <p className="text-center py-10 text-theme-text-muted">{texts.noPostsFound}</p>
            )}
        </div>
    );
};

export default WhisperView;
import React, { useState, useEffect } from 'react';
import { User, UserRole, Language } from '../../types.ts';
import CandidatePill from '../CandidatePill.tsx';
import * as api from '../../services/apiService.ts';
import { ResponsiveGrid } from '../UI/Responsive.tsx';
import { UI_TEXT } from '../../translations.ts';
import Spinner from '../Spinner.tsx';

interface WomenCandidatesViewProps {
    onSelectCandidate: (candidate: User) => void;
    user: User | null;
    requestLogin: () => void;
    language: Language;
}

const WomenCandidatesView: React.FC<WomenCandidatesViewProps> = ({ onSelectCandidate, user, requestLogin, language }) => {
    const [candidates, setCandidates] = useState<User[]>([]);
    const [stats, setStats] = useState<{ total: number; women: number }>({ total: 0, women: 0 });
    const [isLoading, setIsLoading] = useState(true);
    const texts = UI_TEXT[language];

    useEffect(() => {
        const fetchAllData = async () => {
            setIsLoading(true);
            try {
                const [femaleCandidates, candidateStats] = await Promise.all([
                    api.getUsers({ role: UserRole.Candidate, gender: 'Female' }),
                    api.getCandidateStats()
                ]);

                setCandidates(femaleCandidates);
                if (candidateStats) {
                    setStats({ total: candidateStats.total, women: candidateStats.women });
                }

            } catch (error) {
                console.error("Failed to fetch women candidates data:", error);
            } finally {
                setIsLoading(false);
            }
        };
        fetchAllData();
    }, []);

    const womenPercentage = stats.total > 0 ? ((stats.women / stats.total) * 100).toFixed(1) : '0';

    return (
        <div className="p-4 sm:p-6">
            <div className="text-center mb-8">
                <h2 className="text-3xl font-bold font-arabic text-white">{texts.women}</h2>
                <p className="text-theme-text-muted mt-2 max-w-2xl mx-auto">{texts.empoweringWomenInPolitics}</p>
            </div>
            
            <div className="glass-card p-4 text-center mb-6 max-w-md mx-auto">
                 <p className="text-xl font-bold text-brand-hot-pink">{womenPercentage}%</p>
                 <p className="text-sm text-theme-text-muted">of candidates are women. Discover their profiles and platforms.</p>
            </div>

             {isLoading ? (
                <Spinner />
             ) : (
                <ResponsiveGrid>
                    {candidates.length > 0 ? (
                        candidates.map(candidate => (
                            <CandidatePill 
                                key={candidate.id} 
                                candidate={candidate} 
                                onSelect={onSelectCandidate} 
                                user={user}
                                requestLogin={requestLogin}
                                language={language}
                            />
                        ))
                    ) : (
                        <p className="text-theme-text-muted col-span-full text-center mt-8">{texts.noCandidatesFoundQR}</p>
                    )}
                </ResponsiveGrid>
            )}
        </div>
    );
};

export default WomenCandidatesView;

